/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.apache.giraph.io.gora.generated;  
@SuppressWarnings("all")
public class GEdgeResult extends org.apache.gora.persistency.impl.PersistentBase implements org.apache.avro.specific.SpecificRecord, org.apache.gora.persistency.Persistent {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GEdgeResult\",\"namespace\":\"org.apache.giraph.io.gora.generated\",\"fields\":[{\"name\":\"edgeId\",\"type\":\"string\"},{\"name\":\"edgeWeight\",\"type\":\"float\"},{\"name\":\"vertexInId\",\"type\":\"string\"},{\"name\":\"vertexOutId\",\"type\":\"string\"},{\"name\":\"label\",\"type\":\"string\"}]}");

  /** Enum containing all data bean's fields. */
  public static enum Field {
    EDGE_ID(0, "edgeId"),
    EDGE_WEIGHT(1, "edgeWeight"),
    VERTEX_IN_ID(2, "vertexInId"),
    VERTEX_OUT_ID(3, "vertexOutId"),
    LABEL(4, "label"),
    ;
    /**
     * Field's index.
     */
    private int index;

    /**
     * Field's name.
     */
    private String name;

    /**
     * Field's constructor
     * @param index field's index.
     * @param name field's name.
     */
    Field(int index, String name) {this.index=index;this.name=name;}

    /**
     * Gets field's index.
     * @return int field's index.
     */
    public int getIndex() {return index;}

    /**
     * Gets field's name.
     * @return String field's name.
     */
    public String getName() {return name;}

    /**
     * Gets field's attributes to string.
     * @return String field's attributes to string.
     */
    public String toString() {return name;}
  };

  public static final String[] _ALL_FIELDS = {
  "edgeId",
  "edgeWeight",
  "vertexInId",
  "vertexOutId",
  "label",
  };

  /**
   * Gets the total field count.
   * @return int field count
   */
  public int getFieldsCount() {
    return GEdgeResult._ALL_FIELDS.length;
  }

  private java.lang.CharSequence edgeId;
  private float edgeWeight;
  private java.lang.CharSequence vertexInId;
  private java.lang.CharSequence vertexOutId;
  private java.lang.CharSequence label;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return edgeId;
    case 1: return edgeWeight;
    case 2: return vertexInId;
    case 3: return vertexOutId;
    case 4: return label;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value) {
    switch (field$) {
    case 0: edgeId = (java.lang.CharSequence)(value); break;
    case 1: edgeWeight = (java.lang.Float)(value); break;
    case 2: vertexInId = (java.lang.CharSequence)(value); break;
    case 3: vertexOutId = (java.lang.CharSequence)(value); break;
    case 4: label = (java.lang.CharSequence)(value); break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'edgeId' field.
   */
  public java.lang.CharSequence getEdgeId() {
    return edgeId;
  }

  /**
   * Sets the value of the 'edgeId' field.
   * @param value the value to set.
   */
  public void setEdgeId(java.lang.CharSequence value) {
    this.edgeId = value;
    setDirty(0);
  }
  
  /**
   * Checks the dirty status of the 'edgeId' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isEdgeIdDirty(java.lang.CharSequence value) {
    return isDirty(0);
  }

  /**
   * Gets the value of the 'edgeWeight' field.
   */
  public java.lang.Float getEdgeWeight() {
    return edgeWeight;
  }

  /**
   * Sets the value of the 'edgeWeight' field.
   * @param value the value to set.
   */
  public void setEdgeWeight(java.lang.Float value) {
    this.edgeWeight = value;
    setDirty(1);
  }
  
  /**
   * Checks the dirty status of the 'edgeWeight' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isEdgeWeightDirty(java.lang.Float value) {
    return isDirty(1);
  }

  /**
   * Gets the value of the 'vertexInId' field.
   */
  public java.lang.CharSequence getVertexInId() {
    return vertexInId;
  }

  /**
   * Sets the value of the 'vertexInId' field.
   * @param value the value to set.
   */
  public void setVertexInId(java.lang.CharSequence value) {
    this.vertexInId = value;
    setDirty(2);
  }
  
  /**
   * Checks the dirty status of the 'vertexInId' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isVertexInIdDirty(java.lang.CharSequence value) {
    return isDirty(2);
  }

  /**
   * Gets the value of the 'vertexOutId' field.
   */
  public java.lang.CharSequence getVertexOutId() {
    return vertexOutId;
  }

  /**
   * Sets the value of the 'vertexOutId' field.
   * @param value the value to set.
   */
  public void setVertexOutId(java.lang.CharSequence value) {
    this.vertexOutId = value;
    setDirty(3);
  }
  
  /**
   * Checks the dirty status of the 'vertexOutId' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isVertexOutIdDirty(java.lang.CharSequence value) {
    return isDirty(3);
  }

  /**
   * Gets the value of the 'label' field.
   */
  public java.lang.CharSequence getLabel() {
    return label;
  }

  /**
   * Sets the value of the 'label' field.
   * @param value the value to set.
   */
  public void setLabel(java.lang.CharSequence value) {
    this.label = value;
    setDirty(4);
  }
  
  /**
   * Checks the dirty status of the 'label' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isLabelDirty(java.lang.CharSequence value) {
    return isDirty(4);
  }

  /** Creates a new GEdgeResult RecordBuilder */
  public static org.apache.giraph.io.gora.generated.GEdgeResult.Builder newBuilder() {
    return new org.apache.giraph.io.gora.generated.GEdgeResult.Builder();
  }
  
  /** Creates a new GEdgeResult RecordBuilder by copying an existing Builder */
  public static org.apache.giraph.io.gora.generated.GEdgeResult.Builder newBuilder(org.apache.giraph.io.gora.generated.GEdgeResult.Builder other) {
    return new org.apache.giraph.io.gora.generated.GEdgeResult.Builder(other);
  }
  
  /** Creates a new GEdgeResult RecordBuilder by copying an existing GEdgeResult instance */
  public static org.apache.giraph.io.gora.generated.GEdgeResult.Builder newBuilder(org.apache.giraph.io.gora.generated.GEdgeResult other) {
    return new org.apache.giraph.io.gora.generated.GEdgeResult.Builder(other);
  }
  
  private static java.nio.ByteBuffer deepCopyToReadOnlyBuffer(
      java.nio.ByteBuffer input) {
    java.nio.ByteBuffer copy = java.nio.ByteBuffer.allocate(input.capacity());
    int position = input.position();
    input.reset();
    int mark = input.position();
    int limit = input.limit();
    input.rewind();
    input.limit(input.capacity());
    copy.put(input);
    input.rewind();
    copy.rewind();
    input.position(mark);
    input.mark();
    copy.position(mark);
    copy.mark();
    input.position(position);
    copy.position(position);
    input.limit(limit);
    copy.limit(limit);
    return copy.asReadOnlyBuffer();
  }
  
  /**
   * RecordBuilder for GEdgeResult instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GEdgeResult>
    implements org.apache.avro.data.RecordBuilder<GEdgeResult> {

    private java.lang.CharSequence edgeId;
    private float edgeWeight;
    private java.lang.CharSequence vertexInId;
    private java.lang.CharSequence vertexOutId;
    private java.lang.CharSequence label;

    /** Creates a new Builder */
    private Builder() {
      super(org.apache.giraph.io.gora.generated.GEdgeResult.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.apache.giraph.io.gora.generated.GEdgeResult.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing GEdgeResult instance */
    private Builder(org.apache.giraph.io.gora.generated.GEdgeResult other) {
            super(org.apache.giraph.io.gora.generated.GEdgeResult.SCHEMA$);
      if (isValidValue(fields()[0], other.edgeId)) {
        this.edgeId = (java.lang.CharSequence) data().deepCopy(fields()[0].schema(), other.edgeId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.edgeWeight)) {
        this.edgeWeight = (java.lang.Float) data().deepCopy(fields()[1].schema(), other.edgeWeight);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.vertexInId)) {
        this.vertexInId = (java.lang.CharSequence) data().deepCopy(fields()[2].schema(), other.vertexInId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.vertexOutId)) {
        this.vertexOutId = (java.lang.CharSequence) data().deepCopy(fields()[3].schema(), other.vertexOutId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.label)) {
        this.label = (java.lang.CharSequence) data().deepCopy(fields()[4].schema(), other.label);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'edgeId' field */
    public java.lang.CharSequence getEdgeId() {
      return edgeId;
    }
    
    /** Sets the value of the 'edgeId' field */
    public org.apache.giraph.io.gora.generated.GEdgeResult.Builder setEdgeId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.edgeId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'edgeId' field has been set */
    public boolean hasEdgeId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'edgeId' field */
    public org.apache.giraph.io.gora.generated.GEdgeResult.Builder clearEdgeId() {
      edgeId = null;
      fieldSetFlags()[0] = false;
      return this;
    }
    
    /** Gets the value of the 'edgeWeight' field */
    public java.lang.Float getEdgeWeight() {
      return edgeWeight;
    }
    
    /** Sets the value of the 'edgeWeight' field */
    public org.apache.giraph.io.gora.generated.GEdgeResult.Builder setEdgeWeight(float value) {
      validate(fields()[1], value);
      this.edgeWeight = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'edgeWeight' field has been set */
    public boolean hasEdgeWeight() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'edgeWeight' field */
    public org.apache.giraph.io.gora.generated.GEdgeResult.Builder clearEdgeWeight() {
      fieldSetFlags()[1] = false;
      return this;
    }
    
    /** Gets the value of the 'vertexInId' field */
    public java.lang.CharSequence getVertexInId() {
      return vertexInId;
    }
    
    /** Sets the value of the 'vertexInId' field */
    public org.apache.giraph.io.gora.generated.GEdgeResult.Builder setVertexInId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.vertexInId = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'vertexInId' field has been set */
    public boolean hasVertexInId() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'vertexInId' field */
    public org.apache.giraph.io.gora.generated.GEdgeResult.Builder clearVertexInId() {
      vertexInId = null;
      fieldSetFlags()[2] = false;
      return this;
    }
    
    /** Gets the value of the 'vertexOutId' field */
    public java.lang.CharSequence getVertexOutId() {
      return vertexOutId;
    }
    
    /** Sets the value of the 'vertexOutId' field */
    public org.apache.giraph.io.gora.generated.GEdgeResult.Builder setVertexOutId(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.vertexOutId = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'vertexOutId' field has been set */
    public boolean hasVertexOutId() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'vertexOutId' field */
    public org.apache.giraph.io.gora.generated.GEdgeResult.Builder clearVertexOutId() {
      vertexOutId = null;
      fieldSetFlags()[3] = false;
      return this;
    }
    
    /** Gets the value of the 'label' field */
    public java.lang.CharSequence getLabel() {
      return label;
    }
    
    /** Sets the value of the 'label' field */
    public org.apache.giraph.io.gora.generated.GEdgeResult.Builder setLabel(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.label = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'label' field has been set */
    public boolean hasLabel() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'label' field */
    public org.apache.giraph.io.gora.generated.GEdgeResult.Builder clearLabel() {
      label = null;
      fieldSetFlags()[4] = false;
      return this;
    }
    
    @Override
    public GEdgeResult build() {
      try {
        GEdgeResult record = new GEdgeResult();
        record.edgeId = fieldSetFlags()[0] ? this.edgeId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.edgeWeight = fieldSetFlags()[1] ? this.edgeWeight : (java.lang.Float) defaultValue(fields()[1]);
        record.vertexInId = fieldSetFlags()[2] ? this.vertexInId : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.vertexOutId = fieldSetFlags()[3] ? this.vertexOutId : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.label = fieldSetFlags()[4] ? this.label : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
  
  public GEdgeResult.Tombstone getTombstone(){
  	return TOMBSTONE;
  }

  public GEdgeResult newInstance(){
    return newBuilder().build();
  }

  private static final Tombstone TOMBSTONE = new Tombstone();
  
  public static final class Tombstone extends GEdgeResult implements org.apache.gora.persistency.Tombstone {
  
      private Tombstone() { }
  
	  		  /**
	   * Gets the value of the 'edgeId' field.
		   */
	  public java.lang.CharSequence getEdgeId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'edgeId' field.
		   * @param value the value to set.
	   */
	  public void setEdgeId(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'edgeId' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isEdgeIdDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'edgeWeight' field.
		   */
	  public java.lang.Float getEdgeWeight() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'edgeWeight' field.
		   * @param value the value to set.
	   */
	  public void setEdgeWeight(java.lang.Float value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'edgeWeight' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isEdgeWeightDirty(java.lang.Float value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'vertexInId' field.
		   */
	  public java.lang.CharSequence getVertexInId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'vertexInId' field.
		   * @param value the value to set.
	   */
	  public void setVertexInId(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'vertexInId' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isVertexInIdDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'vertexOutId' field.
		   */
	  public java.lang.CharSequence getVertexOutId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'vertexOutId' field.
		   * @param value the value to set.
	   */
	  public void setVertexOutId(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'vertexOutId' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isVertexOutIdDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'label' field.
		   */
	  public java.lang.CharSequence getLabel() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'label' field.
		   * @param value the value to set.
	   */
	  public void setLabel(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'label' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isLabelDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
		  
  }
  
}

